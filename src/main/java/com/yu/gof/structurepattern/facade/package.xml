<html>
	<p>结构型模式 - 外观模式</p>
	<p>统一口径、一致对外</p>
	
	<p>
		要求一个子系统的外部与其内部的通信必须通过一个统一的对象进行。门面模式提供一个高层次的接口，使得子系统更易于使用。
		
		隐藏系统的复杂性，并向客户端提供了一个客户端可以访问系统的接口。这种类型的设计模式属于结构型模式，它向现有的系统添加一个接口，来隐藏系统的复杂性。

		这种模式涉及到一个单一的类，该类提供了客户端请求的简化方法和对现有系统类方法的委托调用。
	</p>
	<p>
		主要解决：降低访问复杂系统的内部子系统时的复杂度，简化客户端与之的接口。
		何时使用：1、客户端不需要知道系统内部的复杂联系，整个系统只需提供一个"接待员"即可。 2、定义系统的入口。
		如何解决：客户端不与系统耦合，外观类与系统耦合。
		关键代码：在客户端和复杂系统之间再加一层，这一层将调用顺序、依赖关系等处理好。
		优点： 1、减少系统相互依赖。 2、提高灵活性。 3、提高了安全性。
		缺点：不符合开闭原则，如果要改东西很麻烦，继承重写都不合适。
	</p>
	
	<p>
		示例：
			需求、开发、测试人员，一个需求下来，需求同学先跟开发同学一起跟进这个需求，需求开发完成了，需求同学和测试同学沟通了需求的测试要点，测试同学就开测。这个过程中需求一直跟到上线。
			现在选出一个技术组长，也就是外观模式的象征，他专门对外提供接收需求服务，然后安排需求给开发同学和测试同学，保证完成。
			
	</p>
</html>