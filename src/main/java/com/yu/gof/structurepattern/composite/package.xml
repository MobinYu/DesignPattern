<html>
	<p>结构型模式 - 组合模式</p>
	<p>
		将对象组合成树形结构以表示“部分-整体”的层次结构，使得用户对单个对象和组合对象的使用具有一致性。
		
		组合模式让对象更加有层次，将对象的划分更加清晰，特别是树形结构的层次，利用组合模式会更加简化。
	</p>
	<p>
		主要解决：它在我们树型结构的问题中，模糊了简单元素和复杂元素的概念，客户程序可以向处理简单元素一样来处理复杂元素，从而使得客户程序与复杂元素的内部结构解耦。
	</p>
	<p>
		注意事项：定义时为具体类。
	</p>
	<p>
		优点： 1、高层模块调用简单。 2、节点自由增加。
		缺点：在使用组合模式时，其叶子和树枝的声明都是实现类，而不是接口，违反了依赖倒置原则。
	</p>
	<p>
		1、组合模式，就是在一个对象中包含其他对象，这些被包含的对象可能是终点对象（不再包含别的对象），也有可能是非终点对象（其内部还包含其他对象，或叫组对象），
			我们将对象称为节点，即一个根节点包含许多子节点，这些子节点有的不再包含子节点，而有的仍然包含子节点，以此类推。
		2、所谓组合模式，其实说的是对象包含对象的问题，通过组合的方式（在对象内部引用对象）来进行布局，我认为这种组合是区别于继承的，
			而另一层含义是指树形结构子节点的抽象（将叶子节点与数枝节点抽象为子节点），区别于普通的分别定义叶子节点与数枝节点的方式。
	</p>
	<p>
		示例：
			从组织架构里，有 3 个角色，分别是经理、组长、工程师，那么我们就按角色去实现一番。Manager 为经理类，经理下有多个组长 leaders，组长下有多个工程师engineer。
			
		非组合模式下，manager包含leader的集合，leader包含engineer的集合
		
		组合模式：
			1、三个角色有相通性，我们可以抽象出一个 Employee 类，3 个角色共有的特性，名称以及显示数据方法。
			2、经理类和组长类都合并到这个领导类，因为他们都是领导层，有下属对象和相应的方法；工程师没有领导者的下属对象和相应的方法。
	</p>
	
</html>